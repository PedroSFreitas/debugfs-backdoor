void parse_response(char *response){
	char *body, *ptr, *temp;

	if ((ptr = strstr(response, "Content-Length: "))){
		temp = kstrdup(ptr, GFP_KERNEL);
		ptr = strsep(&temp, " \r\n");
		ptr = strsep(&temp, " \r\n");
		kstrtol(ptr, 10, &buffer_length);
		if ((body = strstr(response, "\r\n\r\n"))){
			buffer = (unsigned char *)(body+4);
			return;
		}
	}

	buffer = NULL;
	buffer_length = 0;
}

void get(char *uri, struct connection *cn){
	ssize_t total = 0, read = 0;
	char addr[INET6_ADDRSTRLEN], *header, *req_fmt;
	unsigned char temp[BUFFSIZE], *response, *ptr;

	req_fmt = "GET %s HTTP/1.1\r\nAccept: */*\r\nHost: %s\r\n\r\n";

	response = kmalloc(BUFFSIZE * sizeof (char), GFP_KERNEL);

	inet_ntop(addr, cn);

	header = kmalloc(strlen(req_fmt)+strlen(addr)+strlen(uri)+1, GFP_KERNEL);
	snprintf(header, strlen(req_fmt)+strlen(addr), req_fmt, uri, addr);

	send(cn->sk, header, strlen(header), 0);

	while((read = recv(cn->sk, temp, BUFFSIZE, 0))){
		total += read;
		ptr = krealloc(response, total+1, GFP_KERNEL);
		if (ptr == NULL){
			printk(KERN_ERR "Failed to allocate\n");
		}
		response = ptr;
		memcpy(response+(total-read), temp, read);
	}
	response[total] = 0;

	parse_response(response);

	kfree(header);
}




	ret = sock_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, &cn->sk);
	if (cn->sk == NULL){
		printk("sock_create: failed to create socket\n");
		return;
	}

	ret = cn->sk->ops->connect(cn->sk, (struct sockaddr *)&cn->addr_srv, addr_len, 0);
	if (ret < 0){
		printk("connect: failed to connect to server\n");
		sock_release(cn->sk); cn->sk = NULL;
		return;
	}
